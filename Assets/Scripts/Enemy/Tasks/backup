using UnityEngine;

using BehaviorTree;
using System.Collections.Generic;

public class TaskPatrol : Node
{
    private Transform _transform;
    private Transform[] _waypoints;

    private int _currentWaypointIndex = 0;

    private float _waitTime = 1f; // in seconds
    private float _waitCounter = 0f;
    private bool _waiting = false;
    private int[,] _map;

    //task patrol will receive the maze
    public TaskPatrol(Transform transform, Transform[] waypoints, int[,] map)
    {
        _transform = transform;
        _waypoints = waypoints;
        _map = map;
    }

    public override NodeState Evaluate()
    {
        // Debug.Log("START EVALUATE TASK PATROL");
        if (_waiting)
        {
            _waitCounter += Time.deltaTime;
            if (_waitCounter >= _waitTime)
            {
                _waiting = false;
            }
        }
        else
        {
            Transform wp = _waypoints[_currentWaypointIndex];
            wp.position = new Vector3(wp.position.x, _transform.position.y, wp.position.z);
            if (Vector3.Distance(_transform.position, wp.position) < 0.01f)
            {
                _transform.position = wp.position;
                _waitCounter = 0f;
                _waiting = true;

                _currentWaypointIndex = (_currentWaypointIndex + 1) % _waypoints.Length;
            }
            else
            {
                _transform.position = Vector3.MoveTowards(_transform.position, wp.position, EnemyBT.speed * Time.deltaTime);
                _transform.LookAt(wp.position);
            }
        }


        state = NodeState.RUNNING;
        return state;
    }
}

